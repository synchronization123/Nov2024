import requests
import pandas as pd

# Jira API URL
jira_url = "https://jira.ghkk.com/rest/api/2/search?jql="

# Prompt the user for versions
versions = input("Enter versions (comma-separated): ").split(',')

# Create the JQL query string based on versions input
jql = f'labels in ({",".join(versions)}) OR "Build(s)" in ({",".join(versions)})'

# Set up Jira API request
headers = {
    'Content-Type': 'application/json'
}

# Jira Username and API Token
username = 'your_username'  # Replace with your Jira username
api_token = 'your_api_token'  # Replace with your Jira API token

# Make the request to Jira API with API token for authentication
response = requests.get(f"{jira_url}{jql}", headers=headers, auth=(username, api_token))

# Check if the response was successful
if response.status_code == 200:
    data = response.json()
    
    # Initialize a list to store the rows of the Excel sheet
    rows = []

    for issue in data['issues']:
        issue_key = issue['key']
        issue_type = issue['fields']['issuetype']['name']
        labels = issue['fields'].get('labels', [])
        
        # Check if the issue is related to security
        if 'Security' in labels or 'AppSecurity' in labels:
            issue_category = 'Security Jira'
        else:
            issue_category = 'Non-Security Jira'
        
        # Check the custom field for QA Verified Version (cf[13701])
        qa_verified_version = 'Not Found'
        if 'cf[13701]' in issue['fields']:
            qa_verified_version = issue['fields']['cf[13701]']
        
        # Extract comments
        comments = issue['fields'].get('comment', {}).get('comments', [])
        comment_columns = [comment['body'] for comment in comments]
        
        # Fill in extra columns with empty strings if there are fewer comments than available columns
        max_comments = 10  # Set a limit on how many comment columns you want (adjust as needed)
        while len(comment_columns) < max_comments:
            comment_columns.append('')
        
        # Combine the row data with the comments
        row = [issue_key, issue_type, labels, issue_category, qa_verified_version] + comment_columns
        rows.append(row)
    
    # Define the column names
    columns = ['Issuekey', 'Issuetype', 'Labels', 'Issue Category', 'QA Verified Version']
    
    # Add columns for each comment (adjust the range if needed)
    columns += [f'Comment {i+1}' for i in range(max_comments)]
    
    # Create a pandas DataFrame from the rows
    df = pd.DataFrame(rows, columns=columns)
    
    # Save the DataFrame to an Excel file
    df.to_excel('jiradata_with_comments.xlsx', index=False)
    print("Data saved to jiradata_with_comments.xlsx.")
else:
    print(f"Failed to fetch data from Jira. Status code: {response.status_code}")